(defvar widget-width 32)

(defwidget bar []
  (box :class "bar-main" 
       :orientation "vertical" 
       :halign "center"
       :space-evenly false
    (bar-top)
    (bar-bottom)))
    
   
(defwidget bar-top []
  (bar-section :class "bar-top" 
               :valign "start"
    (launcher)
    (bspwm-workspaces)))

(defwidget bar-bottom []
  (bar-section :class "bar-bottom"
               :valign "end"
    (status-icons)
    (time)))

(defwidget bar-section [valign class]
  (box :class "bar-section ${class}"
       :valign valign
       :halign 'start'
       :width widget-width
       :orientation "vertical"
       :space-evenly false
       :vexpand true
    (children)))

(defwidget icon [text ?size]
  (label :class 'icon'
         :style 'font-size: ${size ?: '1.7'}em'
         :text text))
  

(defwidget time []
  (box :class "vert-padding time"
       :vexpand true
       :orientation "vertical"
       :space-evenly false
    {time.hour}
    {time.minute}))
    
(defwidget launcher []
  (button :onclick `echo "Nope!"` ; TODO: Implement rofi launcher on this clicked
    (label :text "ï¡›" :height widget-width :xalign 0.45)))

(defwidget status-icons []
  (button :class 'stats'
          :onclick '${EWW_CMD} open control --toggle'
    (box :orientation 'vertical'
      (network-icon)
      (volume-icon)
      (battery-icon :visible {EWW_BATTERY != ""}))))
    

; BSPWM Stuff {{{

(defwidget bspwm-workspaces []
    (box :class 'vert-padding'
         :orientation 'vertical'
      ; Hidden but necessary. If this is not present, the listener doesn't update.
      (label :visible false :text bspwm-focused)
      (for workspace in bspwm-desktops
              (workspace-label :workspace workspace)))) 


(defwidget workspace-label [workspace]
  (button :class 'workspace-label'
          :height widget-width
          :onclick 'bspc desktop --focus ${workspace}'
    {workspace == bspwm-focused ? bspwm-focused-icon : bspwm-unfocused-icon}))

; }}}
    
